//!pragma section common
//KernelImageProcessor
#version 130

//!pragma section varying 
vec2 texture_coordinate;

//!pragma section vertex
//!pragma include VertexShader.vsh

//!pragma section fragment
//!pragma default texture_0 0

uniform vec2 pixel_size;
uniform sampler2D texture_0;

float kernel_array[ $kernel_array_size$ ] = float[]( $kernel_array$ );

out vec4 result;
void main()
{
	vec4 sum = vec4(0.0, 0.0, 0.0, 0.0);
	float kernel_sum = 0.0;
	
	int position = 0;
	
$convolution_1d_begin$
	for (int i = -$kernel_half_size$; i <= $kernel_half_size$; ++i)
	{
		sum += texture2D(texture_0, texture_coordinate + vec2(float(i), float(i)) * pixel_size) * kernel_array[position];
		kernel_sum += kernel_array[position];
		position++;
	}
$convolution_1d_end$


$convolution_2d_begin$
	for (int y = -$kernel_half_size$; y <= $kernel_half_size$; ++y)
	{
		for (int x = -$kernel_half_size$; x <= $kernel_half_size$; ++x)
		{
			sum += texture2D(texture_0, texture_coordinate + vec2(float(x), float(y)) * pixel_size) * kernel_array[position];
			kernel_sum += kernel_array[position];
			position++;
		}		
	}
$convolution_2d_end$
	
	if (kernel_sum <= 0.0)
	{
		kernel_sum = 1.0;
	}
	
	sum /= kernel_sum;
	sum.a = 1.0f;
	result = sum;
}
