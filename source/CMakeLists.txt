CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
SET(CMAKE_VERBOSE_MAKEFILE ON)

SET(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/../cmake/modules")


SET(RENGINE_DIR "${CMAKE_SOURCE_DIR}")
SET(RENGINE_NAME rengine)

#
# Remove MinSizeRel RelWithDebInfo and 
#

SET(CMAKE_CONFIGURATION_TYPES Debug Release CACHE TYPE INTERNAL FORCE)

PROJECT(${RENGINE_NAME})

#
# Project Options
#

OPTION(RENGINE_DEBUG "Debug Mode" ON)
OPTION(RENGINE_WITH_V4L "Enable Video4Linux VideoGrabber Support" ON)
OPTION(RENGINE_WITH_DSHOW "Enable DirectShow VideoGrabber Support" ON)
OPTION(RENGINE_WITH_OPENCV "Enable OpenCV Support" ON)
OPTION(RENGINE_WITH_MEMORY_MANAGER "Enable dynamic memory checkup" ON)
OPTION(RENGINE_WITH_OPENAL "Enable OpenAL Support" ON)
OPTION(RENGINE_WITH_DSOUND "Enable DirectSound Support" ON)
OPTION(RENGINE_WITH_ALSA "Enable Advanced Linux Sound Architecture Support" ON)
OPTION(RENGINE_WITH_OSS "Enable Open Sound System Support" ON)
OPTION(RENGINE_WITH_PULSEAUDIO "Enable Pulse Audio Support" ON)

IF(RENGINE_DEBUG)
	SET(CMAKE_BUILD_TYPE Debug)
ENDIF(RENGINE_DEBUG)

IF(NOT RENGINE_DEBUG)
	SET(CMAKE_BUILD_TYPE Release)
ENDIF(NOT RENGINE_DEBUG)


#
# Clear Variables
#

SET(CMAKE_CXX_FLAGS "")
SET(CMAKE_CXX_FLAGS_RELEASE "")
SET(CMAKE_CXX_FLAGS_DEBUG "")

SET(CMAKE_C_FLAGS "")
SET(CMAKE_C_FLAGS_RELEASE "")
SET(CMAKE_C_FLAGS_DEBUG "")

SET(CMAKE_EXE_LINKER_FLAGS "")
SET(CMAKE_EXE_LINKER_FLAGS_RELEASE "")
SET(CMAKE_EXE_LINKER_FLAGS_DEBUG "")

SET(CMAKE_INSTALL_PREFIX "${CMAKE_SOURCE_DIR}/../")

#
# Macros
#

MACRO(SETUP_APPLICATION NAME SOURCES LIBRARIES)
	ADD_EXECUTABLE(${NAME} ${SOURCES})
	TARGET_LINK_LIBRARIES(${NAME} ${LIBRARIES})            
	INSTALL(TARGETS ${NAME} RUNTIME DESTINATION bin)
ENDMACRO(SETUP_APPLICATION)

MACRO(GATHER_PROJECT_FILES ProjectDir ProjectFiles)
	SET(Dir ${CMAKE_SOURCE_DIR}/${ProjectDir})
	
	FILE(GLOB_RECURSE src ${Dir}/*.c ${Dir}/*.cpp)
	FILE(GLOB_RECURSE inc ${Dir}/*.h ${Dir}/*.hpp)

	FOREACH(resource ${inc};${src})
		#MESSAGE(STATUS "resource: ${resource}")
		#STRING(REGEX REPLACE "${Dir}/" "" relative_resource "${resource}")
		STRING(REPLACE "${Dir}/" "" relative_resource "${resource}")
		SET(output_files ${output_files} ${relative_resource})
		get_filename_component(path ${relative_resource} PATH)

		IF(NOT path STREQUAL "")
			string(REPLACE / \\ group ${path})
			source_group(${group} FILES ${relative_resource} )
			#MESSAGE(STATUS "Group: ${group} Resource: ${relative_resource}")
		ENDIF(NOT path STREQUAL "")
	ENDFOREACH(resource)
	SET("${ProjectFiles}" ${inc};${src})
ENDMACRO(GATHER_PROJECT_FILES)


MACRO(AUTO_SETUP_APPLICATION NAME)
	SET(APPLICATION_NAME ${NAME})
	
	GATHER_PROJECT_FILES(${APPLICATION_NAME} APPLICATION_SOURCES)
			
	#MESSAGE(STATUS "${APPLICATION_NAME}: ${APPLICATION_SOURCES}")
			
	SET(APPLICATION_LIBRARIES ${RENGINE_LINK_LIBRARIES})
	SETUP_APPLICATION(${APPLICATION_NAME} "${APPLICATION_SOURCES}" "${APPLICATION_LIBRARIES}")
ENDMACRO(AUTO_SETUP_APPLICATION)


#
# Definitions
#

ADD_DEFINITIONS("-DGLEW_STATIC")

IF (RENGINE_WITH_MEMORY_MANAGER)
	ADD_DEFINITIONS("-DRENGINE_WITH_MEMORY_MANAGER")
ENDIF(RENGINE_WITH_MEMORY_MANAGER)

#
# Compiler Options
#

IF(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_GNUCC)
	IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
		ADD_DEFINITIONS("-D_DEBUG") 		
		#ADD_DEFINITIONS("-D_GLIBCXX_DEBUG")		 # CXX debug mode for std
	ENDIF(CMAKE_BUILD_TYPE STREQUAL "Debug")

	IF(CMAKE_BUILD_TYPE STREQUAL "Release")
		ADD_DEFINITIONS("-DNDEBUG")
	ENDIF(CMAKE_BUILD_TYPE STREQUAL "Release")

	IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
		#-pedantic
		SET(COMPILER_FLAGS "-O0 -g3 -Wall -fmessage-length=0")
	ENDIF(CMAKE_BUILD_TYPE STREQUAL "Debug")

	IF(CMAKE_BUILD_TYPE STREQUAL "Release")
		SET(COMPILER_FLAGS "-O3 -Wall -fmessage-length=0")
	ENDIF(CMAKE_BUILD_TYPE STREQUAL "Release")

	# -Wno-int-to-pointer-cast -Wno-pointer-to-int-cast
	SET(CMAKE_C_FLAGS "${COMPILER_FLAGS} -std=gnu99")
	SET(CMAKE_CXX_FLAGS "${COMPILER_FLAGS} -std=gnu++98")

	IF(WIN32)
		SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -mwindows")
	ENDIF(WIN32)
ENDIF(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_GNUCC)

IF(MSVC)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /nologo")	#Supress Startup Banner
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /EHsc")		#enable exceptions
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W3")		#set warning level
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4305")	#disable warning C4305: 'initializing' : i.e. truncation from 'double' to 'float'	
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4244")	#disable warning C4244: 'initializing' : i.e. conversion from 'double' to 'float', possible loss of data
	
	#Release specific
	SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT") 		#Runtime Library
	SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /DNDEBUG")	#Define _DEBUG
	
	#Debug specific
	SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MTd") 			#Runtime Library
	SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /ZI")			#Debug information format
	SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /RTC1")			#Runtime checks
	SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /Od")			#Disable Optimization
	SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /Gm")			#Enable Minimal Rebuild
	SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /D_DEBUG")			#Define _DEBUG
	SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /FR")			#Add browse information
	
	SET(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} /DEBUG")		#Add debug info
				
	ADD_DEFINITIONS(-D_CONSOLE)
	ADD_DEFINITIONS(-D_SCL_SECURE_NO_WARNINGS)
	ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE)
ENDIF(MSVC)

#
# Include Directories
#

SET(RENGINE_INCLUDE_DIRS ${RENGINE_DIR}/librengine/include)

#
# Link libraries
#

SET(RENGINE_LINK_LIBRARIES "")
SET(RENGINE_LINK_LIBRARIES ${RENGINE_LINK_LIBRARIES} ${RENGINE_NAME})

#
# Dependencies
#

#
# OpenGL
#

FIND_PACKAGE(OpenGL REQUIRED)
SET(RENGINE_INCLUDE_DIRS ${RENGINE_INCLUDE_DIRS} ${OPENGL_INCLUDE_DIR})
SET(RENGINE_LINK_LIBRARIES ${RENGINE_LINK_LIBRARIES} ${OPENGL_LIBRARIES})

#
# Threads
#

IF(UNIX)
	FIND_PACKAGE(Threads REQUIRED)	
	SET(RENGINE_LINK_LIBRARIES ${RENGINE_LINK_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
ENDIF(UNIX)

#
# X11
#

IF(UNIX)
	FIND_PACKAGE(X11 REQUIRED)	
	#SET(RENGINE_INCLUDE_DIRS ${RENGINE_INCLUDE_DIRS} ${X11_INCLUDE_DIR})
	#SET(RENGINE_LINK_LIBRARIES ${RENGINE_LINK_LIBRARIES} ${X11_LIBRARIES})
ENDIF(UNIX)

#
# V4L
#

IF(NOT UNIX AND RENGINE_WITH_V4L)
	SET(RENGINE_WITH_V4L OFF)
ENDIF(NOT UNIX AND RENGINE_WITH_V4L)

IF(RENGINE_WITH_V4L)
	FIND_PACKAGE(LibV4L2)
	
	IF(LIBV4L2_FOUND)
		SET(RENGINE_INCLUDE_DIRS ${RENGINE_INCLUDE_DIRS} ${LIBV4L2_INCLUDE_DIR})
		SET(RENGINE_LINK_LIBRARIES ${RENGINE_LINK_LIBRARIES} ${LIBV4L2_LIBRARY})
		ADD_DEFINITIONS("-DRENGINE_WITH_V4L")
	ELSE(LIBV4L2_FOUND)
		SET(RENGINE_WITH_V4L OFF)
	ENDIF(LIBV4L2_FOUND)
ENDIF (RENGINE_WITH_V4L)

#
# DSHOW
#

IF(NOT WIN32 AND RENGINE_WITH_DSHOW)
	SET(RENGINE_WITH_DSHOW OFF)
ENDIF(NOT WIN32 AND RENGINE_WITH_DSHOW)

IF(RENGINE_WITH_DSHOW)
	SET(RENGINE_LINK_LIBRARIES ${RENGINE_LINK_LIBRARIES} quartz strmiids)
	ADD_DEFINITIONS("-DRENGINE_WITH_DSHOW")
ENDIF (RENGINE_WITH_DSHOW)

#
# OpenAL
#

IF(RENGINE_WITH_OPENAL)
	ADD_DEFINITIONS("-DRENGINE_WITH_OPENAL")
	ADD_DEFINITIONS("-DAL_ALEXT_PROTOTYPES")
ELSE(RENGINE_WITH_OPENAL)
	SET(RENGINE_WITH_DSOUND OFF)
	SET(RENGINE_WITH_PULSEAUDIO OFF)
	SET(RENGINE_WITH_OSS OFF)
	SET(RENGINE_WITH_ALSA OFF)
ENDIF(RENGINE_WITH_OPENAL)

#
# DSOUND
#

IF(NOT WIN32 AND RENGINE_WITH_DSOUND)
	SET(RENGINE_WITH_DSOUND OFF)
ENDIF(NOT WIN32 AND RENGINE_WITH_DSOUND)

IF(RENGINE_WITH_DSOUND)
	SET(RENGINE_LINK_LIBRARIES ${RENGINE_LINK_LIBRARIES} dsound)
	ADD_DEFINITIONS("-DRENGINE_WITH_DSOUND")
ENDIF (RENGINE_WITH_DSOUND)

#
# ALSA
#

IF(NOT UNIX AND RENGINE_WITH_ALSA)
	SET(RENGINE_WITH_ALSA OFF)
ENDIF(NOT UNIX AND RENGINE_WITH_ALSA)

IF(RENGINE_WITH_ALSA)
	FIND_PACKAGE(ALSA)
	IF(ALSA_FOUND)
		SET(RENGINE_INCLUDE_DIRS ${RENGINE_INCLUDE_DIRS} ${ALSA_INCLUDE_DIR})
		SET(RENGINE_LINK_LIBRARIES ${RENGINE_LINK_LIBRARIES} ${ALSA_LIBRARY})
		ADD_DEFINITIONS("-DRENGINE_WITH_ALSA")
	ELSE(ALSA_FOUND)
		SET(RENGINE_WITH_ALSA OFF)
	ENDIF(ALSA_FOUND)
ENDIF (RENGINE_WITH_ALSA)

#
# OSS
#

IF(NOT UNIX AND RENGINE_WITH_OSS)
	SET(RENGINE_WITH_OSS OFF)
ENDIF(NOT UNIX AND RENGINE_WITH_OSS)

IF(RENGINE_WITH_OSS)
	ADD_DEFINITIONS("-DRENGINE_WITH_OSS")
ENDIF (RENGINE_WITH_OSS)

#
# PULSEAUDIO
#

IF(NOT UNIX AND RENGINE_WITH_PULSEAUDIO)
	SET(RENGINE_WITH_PULSEAUDIO OFF)
ENDIF(NOT UNIX AND RENGINE_WITH_PULSEAUDIO)

IF(RENGINE_WITH_PULSEAUDIO)
	FIND_PACKAGE(PulseAudio)
	IF(PULSEAUDIO_FOUND)
		SET(RENGINE_INCLUDE_DIRS ${RENGINE_INCLUDE_DIRS} ${PULSEAUDIO_INCLUDE_DIR})
		SET(RENGINE_LINK_LIBRARIES ${RENGINE_LINK_LIBRARIES} ${PULSEAUDIO_LIBRARY})
		ADD_DEFINITIONS("-DRENGINE_WITH_PULSEAUDIO")
	ELSE(PULSEAUDIO_FOUND)
		SET(RENGINE_WITH_PULSEAUDIO OFF)
	ENDIF(PULSEAUDIO_FOUND)
ENDIF (RENGINE_WITH_PULSEAUDIO)


#
# OpenCV
#

IF(RENGINE_WITH_OPENCV)
	FIND_PACKAGE(OpenCV)
	
	IF(OpenCV_FOUND)	
		SET(RENGINE_INCLUDE_DIRS ${RENGINE_INCLUDE_DIRS} ${OpenCV_INCLUDE_DIRS})
		SET(RENGINE_LINK_LIBRARIES ${RENGINE_LINK_LIBRARIES} ${OpenCV_LIBS})
		ADD_DEFINITIONS("-DRENGINE_WITH_OPENCV")
	ELSE(OpenCV_FOUND)
		SET(RENGINE_WITH_OPENCV OFF)
	ENDIF(OpenCV_FOUND)
ENDIF(RENGINE_WITH_OPENCV)

INCLUDE(${CMAKE_ROOT}/Modules/CheckIncludeFile.cmake)
INCLUDE(${CMAKE_ROOT}/Modules/CheckLibraryExists.cmake)

#
# Binary File Descriptor library
#

IF(UNIX AND RENGINE_WITH_MEMORY_MANAGER)

	CHECK_INCLUDE_FILE(bfd.h HAVE_BINUTILS_BFD_HEADER)
	CHECK_LIBRARY_EXISTS(libbfd.a bfd_init "" HAVE_BINUTILS_BFD_LIBRARY)

	IF (HAVE_BINUTILS_BFD_HEADER AND HAVE_BINUTILS_BFD_LIBRARY)
		ADD_DEFINITIONS("-DRENGINE_WITH_BFD")
		SET(RENGINE_LINK_LIBRARIES ${RENGINE_LINK_LIBRARIES} bfd)
	ENDIF(HAVE_BINUTILS_BFD_HEADER AND HAVE_BINUTILS_BFD_LIBRARY)	
	
ENDIF(UNIX AND RENGINE_WITH_MEMORY_MANAGER)


#MESSAGE(STATUS "> RENGINE_INCLUDE_DIRS: ${RENGINE_INCLUDE_DIRS}")
#MESSAGE(STATUS "> RENGINE_LINK_LIBRARIES: ${RENGINE_LINK_LIBRARIES}")

#
# Includes
#

INCLUDE_DIRECTORIES(${RENGINE_INCLUDE_DIRS})

#
# Projects (sub directories with CMakeLists.txt)
#

SET(PROJECT_LIST
	librengine)
#	rengineEmulator)

FOREACH(directory ${PROJECT_LIST})
		ADD_SUBDIRECTORY(${directory})
ENDFOREACH(directory)	

#
# auto Projects
#

SET(AUTO_SETUP_LIST
	UnitTest
	rengineCreateWindows
	rengineFrameBuffer
	rengineHeightmap
	rengineImageProcessor
	rengineShapes
	rengineText
	rengineGUI
	rengineAtlasGenerator
	rengineSquared)

IF(RENGINE_WITH_V4L OR RENGINE_WITH_DSHOW)
	SET(AUTO_SETUP_LIST ${AUTO_SETUP_LIST} rengineCapture)
ENDIF(RENGINE_WITH_V4L OR RENGINE_WITH_DSHOW)	
	
FOREACH(directory ${AUTO_SETUP_LIST})
		AUTO_SETUP_APPLICATION(${directory})
ENDFOREACH(directory)

#
# Manual Projects
#

# rubikal
SET(APPLICATION_NAME rengineRubikal)
SET(APPLICATION_SOURCES ${APPLICATION_NAME}/${APPLICATION_NAME}.cpp 
						${APPLICATION_NAME}/Algorithm.cpp 
						${APPLICATION_NAME}/RubiksCube.cpp 
						${APPLICATION_NAME}/RubiksCubeRenderer.cpp)
SET(APPLICATION_LIBRARIES ${RENGINE_LINK_LIBRARIES})
 
IF(RENGINE_WITH_OPENCV)
	SET(APPLICATION_SOURCES ${APPLICATION_SOURCES} ${APPLICATION_NAME}/CubeDetector.cpp)
ENDIF(RENGINE_WITH_OPENCV)

SETUP_APPLICATION(${APPLICATION_NAME} "${APPLICATION_SOURCES}" "${APPLICATION_LIBRARIES}")

